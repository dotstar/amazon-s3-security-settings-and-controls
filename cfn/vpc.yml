AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a VPC and Cloud9 instance for Immersion Day lab.  Use condition to determine if we build a single, public subnet or a full range of public, private, and database subnets.
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: baseVPC
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.2.0.0/16
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.2.1.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  IsEventEngine:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
      
    
Conditions:
  EventEngine: !Equals [ !Ref IsEventEngine, true]
  NotEventEngine: !Equals [ !Ref IsEventEngine, false]


Resources:  
       
       
    Cloud9EE:
        Type: AWS::Cloud9::EnvironmentEC2
        Condition: EventEngine
        Properties: 
            AutomaticStopTimeMinutes: 30
            Description: Client environment for lab
            InstanceType: t2.micro
            Name: !Join [ "-", [ "Cloud9", !Ref EnvironmentName, !Ref "AWS::StackName"] ]
            Repositories:
                - RepositoryUrl: https://github.com/dotstar/amazon-s3-security-settings-and-controls
                  PathComponent: /amazon-s3-security-settings-and-controls
            OwnerArn: !Sub  "arn:aws:sts::${AWS::AccountId}:assumed-role/TeamRole/MasterKey"
            SubnetId: !Ref PublicSubnet1
            
    Cloud9:
        Type: AWS::Cloud9::EnvironmentEC2
        Condition: NotEventEngine
        Properties: 
            AutomaticStopTimeMinutes: 30
            Description: Client environment for lab
            InstanceType: t2.micro
            Name: !Join [ "-", [ "Cloud9", !Ref EnvironmentName, !Ref "AWS::StackName"] ]
            Repositories:
                - RepositoryUrl: https://github.com/dotstar/amazon-s3-security-settings-and-controls
                  PathComponent: /amazon-s3-security-settings-and-controls
            SubnetId: !Ref PublicSubnet1
      
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Join [ '',  [!Ref EnvironmentName, "VPC" ]]

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)


    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

Outputs:
  VPC:
    Description: VpcId
    Value: !Ref VPC
    Export:
      Name: VpcId
  PublicSubnet1:
    Description: SubnetId for Public Subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: PublicSubnet1        
